
// Java code to find second largest element in BST

// A binary tree node
class Node {

	int data;
	Node left, right;

	Node(int d) {
		data = d;
		left = right = null;
	}
}

public class BinarySearchTree {

	// Root of BST
	Node root;

	// Constructor
	BinarySearchTree() {
		root = null;
	}

	// function to insert new nodes
	public Node insert(int data) {
		this.root = this.insertRec(this.root, data);
		return root;
	}

	/*
	 * A utility function to insert a new node with given key in BST
	 */
	Node insertRec(Node node, int data) {
		/* If the tree is empty, return a new node */
		if (node == null) {
			this.root = new Node(data);
			return this.root;
		}

		/* Otherwise, recur down the tree */
		if (data < node.data) {
			node.left = this.insertRec(node.left, data);
		} else {
			node.right = this.insertRec(node.right, data);
		}
		return node;
	}

	// class that stores the value of count
	/*
	 * public class count { int c = 0; }
	 */

	int counter = 0;

	// Function to find 2nd largest element
	void secondLargestUtil(Node node) {
		// Base cases, the second condition is important to
		// avoid unnecessary recursive calls
		if (node == null || counter >= 2)
			return;

		// Follow reverse inorder traversal so that the
		// largest element is visited first
		this.secondLargestUtil(node.right);

		// Increment count of visited nodes
		counter++;

		// If c becomes k now, then this is the 2nd largest
		if (counter == 2) {
			System.out.print("2nd largest element is " + node.data);
			return;
		}

		// Recur for left subtree
		this.secondLargestUtil(node.left/* , C */);
	}

	// Function to find 2nd largest element
	/*
	 * void secondLargest(Node node) { // object of class count //count C = new
	 * count(); this.secondLargestUtil(this.root, C); }
	 */

	// Driver function
	
	Node printPostorder(Node root) {
		 if (this.root== null)
	            return;
	 
	        // first recur on left subtree
	        printPostorder(this.root.left);
	        
	        System.out.print(this.root.data + " ");
	        // then recur on right subtree
	        printPostorder(this.root.right);
	 
	        // now deal with the node
	    
	}
	
	public static void main(String[] args) {
		BinarySearchTree tree = new BinarySearchTree();

		/*
		 * Let us create following BST 50 / \ 30 70 / \ / \ 20 40 60 80
		 */

		tree.insert(50);
		tree.insert(30);
		tree.insert(20);
		tree.insert(40);
		tree.insert(70);
		tree.insert(60);
		tree.insert(80);

		tree.secondLargestUtil(tree.root);
	}
}

// This code is contributed by Kamal Rawal
